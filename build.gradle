plugins {
    id 'java'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.2.5'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'sarinxo.desctop'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

javafx {
    version = "21"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

checkstyle {
    toolVersion = "10.12.4"
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://mvnrepository.com/artifact/clojure-interop/java.awt"
    }
}

var resilience4jVersion = "2.3.0"
var lombokVersion = "1.18.38"
var mapstructVersion = "1.6.3"
var log4jVersion = "2.22.0"
var jakartaValidationVertion = "3.0.2"
var hibernateValidationVersion = "8.0.1.Final"
var glassfishVersion = "4.0.2"

dependencies {
    //DI Фреймворк
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    //Реактивное взаимодействие с api по HTTP 1.1
    implementation "org.springframework:spring-webflux"
    implementation "io.projectreactor:reactor-core"
    //Валидация
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationVertion}"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidationVersion}"
    implementation "org.glassfish:jakarta.el:${glassfishVersion}"
    //логи
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    //GUI

    //Захват клавишь для действий
    implementation 'com.github.kwhat:jnativehook:2.2.2'

    //Отказоустойчивость запросов
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"

    //Предпроцессор аннотаций (порядок компиляции сверху вниз)
    //генерация церемониального кода
    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    //генерация мапперов
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}